package jwehrle.popmovies;

import android.os.Parcel;
import android.os.Parcelable;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Package: jwehrle.popmovies
 * Class: Movie implements Parcelable
 * Author: John Wehrle
 * Date: 9/29/15
 * Purpose: This Parcelable class encapsulates a movie's attributes and offers standard public
 * setter and getter methods. Note, this class is constructed from a JSON String and has hard coded
 * Strings for JSON keys and base url in order to avoid possible leaks caused by needlessly
 * passing a context to the constructor. Also, some commented members and methods have been left
 * in in anticipation of Stage 2 of the Udacity assignment.
 * Disclosure: This app is an implementation of a Udacity course assignment.
 * Members:
 * boolean favorite: whether or not the movie is marked as favorite by the user
 * boolean adult:   whether or not the user is classified as adult by themoviedb.com
 * String backdropPath: the url for a backdrop image
 * List<Integer> genreIds:  a List of genre ids generated by themoviedb.com
 * int id:  this movie's themoviedb.com id
 * String originalLanguage: the movie's original language
 * String originalTitle: the movie's original title
 * String overview: a synopsis of the movie supplied by themoviedb.com
 * String releaseDate:  the release date of the movie
 * String posterPath:   the url for a poster image of the movie
 * int popularity:  the popularity rating of the movie on themoviedb.com
 * String title:    the title of the movie
 * boolean video:   whether the movie is released on video
 * int voteAverage: the rating of the movie on themoviedb.com
 * int voteCount:   the vote count of the movie on themoviedb.com
 */
public class Movie implements Parcelable {

    private boolean favorite;  //whether or not the movie is marked as favorite by the user
    private boolean adult;  //whether or not the user is classified as adult by themoviedb.com
    private String backdropPath;  //the url for a backdrop image
    private List<Integer> genreIds;  //a List of genre ids generated by themoviedb.com
    private int id;  //this movie's themoviedb.com id
    private String originalLanguage;  //the movie's original language
    private String originalTitle;  //the movie's original title
    private String overview;  //a synopsis of the movie supplied by themoviedb.com
    private String releaseDate;  //the release date of the movie
    private String posterPath;  //the url for a poster image of the movie
    private int popularity;  //the popularity rating of the movie on themoviedb.com
    private String title;  //the title of the movie
    private boolean video;  //whether the movie is released on video
    private int voteAverage;  //the rating of the movie on themoviedb.com
    private int voteCount;  //the vote count of the movie on themoviedb.com
    //private List<String> reviews;

    /**
     * Movie()
     * Constructs a Movie object by parsing a JSON String.
     * @param movieJSONString the JSON String from which the Movie will be constructed.
     */
    Movie(String movieJSONString) {
        try {
            genreIds = new ArrayList<>();
            //reviews = new ArrayList<>();
            parseJSONString(movieJSONString);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    /**
     * Movie()
     * Copy Constructor: constructs a Movie from another Movie
     * @param orig the original Movie from which the copy Movie is constructed
     */
    Movie (Movie orig) {
        favorite = orig.favorite;
        adult = orig.adult;
        backdropPath = orig.backdropPath;
        genreIds = orig.genreIds;
        id = orig.id;
        originalLanguage = orig.originalLanguage;
        originalTitle = orig.originalTitle;
        overview = orig.overview;
        releaseDate = orig.releaseDate;
        posterPath = orig.posterPath;
        popularity = orig.popularity;
        title = orig.title;
        video = orig.video;
        voteAverage = orig.voteAverage;
        voteCount = orig.voteCount;
    }

    /**
     * parseJSONString()
     * Parses a JSON String into the members of the Movie class. String JSON keys are hard coded to
     * avoid needlessly passing a Context to the Movie constructor. All hard coded Strings are
     * themoviedb.com JSON keys. For documentation on these keys please see
     * http://docs.themoviedb.apiary.io/#reference/movies
     * @param JSONString the JSON String to parse
     * @throws JSONException JSON parsing may fail
     */
    private void parseJSONString(String JSONString) throws JSONException {
        final String IMAGE_URL_BASE = "http://image.tmdb.org/t/p/w185/";
        favorite = false;
        JSONObject movie = new JSONObject(JSONString);
        adult = movie.getBoolean("adult");
        backdropPath = movie.getString("backdrop_path");
        JSONArray genres = movie.getJSONArray("genre_ids");
        for(int i = 0; i < genres.length(); i++) {
            genreIds.add(genres.getInt(i));
        }
        id = movie.getInt("id");
        originalLanguage = movie.getString("original_language");
        originalTitle = movie.getString("original_title");
        overview = movie.getString("overview");
        releaseDate = movie.getString("release_date");
        posterPath = IMAGE_URL_BASE + movie.getString("poster_path");
        popularity = movie.getInt("popularity");
        title = movie.getString("title");
        video = movie.getBoolean("video");
        voteAverage = movie.getInt("vote_average");
        voteCount = movie.getInt("vote_count");
    }

    /**
     * Mandatory override method for Parcelable implementation that is not used
     * @return 0
     */
    @Override
    public int describeContents() {
        return 0;
    }

    /**
     * writeToParcel()
     * Mandatory override method for Parcelable implementation. Writes the members of Movie to
     * a Parcel object. Note: Booleans are recorded as bytes using a ternary construction.
     * @param dest the Parcel object to which the Movie will be written
     * @param flags Contextual flad that is not used.
     */
    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeByte((byte) (favorite ? 1 : 0));
        dest.writeByte((byte) (adult ? 1 : 0));
        dest.writeString(backdropPath);
        dest.writeList(genreIds);
        dest.writeInt(id);
        dest.writeString(originalLanguage);
        dest.writeString(originalTitle);
        dest.writeString(overview);
        dest.writeString(releaseDate);
        dest.writeString(posterPath);
        dest.writeInt(popularity);
        dest.writeString(title);
        dest.writeByte((byte) (video ? 1 : 0));
        dest.writeInt(voteAverage);
        dest.writeInt(voteCount);
    }

    /**
     * Parcelable.Creator
     * Static Creator for constructing a Movie from a Pacel object.
     */
    public static final Parcelable.Creator<Movie> CREATOR = new Parcelable.Creator<Movie>() {
                public Movie createFromParcel(Parcel in) {
                  return new Movie(in);
                }
                public Movie[] newArray(int size) {
                    return new Movie[size];
                }
            };

    /**
     * Movie()
     * Constructs a Movie from a Parcel object. Note, Booleans are read from bytes.
     * @param in the Parcel to be read from.
     */
    private Movie(Parcel in) {
        favorite = in.readByte() != 0;
        adult = in.readByte() != 0;
        backdropPath = in.readString();
        genreIds = new ArrayList<>();
        in.readList(genreIds, Integer.class.getClassLoader());
        id = in.readInt();
        originalLanguage = in.readString();
        originalTitle = in.readString();
        overview = in.readString();
        releaseDate = in.readString();
        posterPath = in.readString();
        popularity = in.readInt();
        title = in.readString();
        video = in.readByte() != 0;
        voteAverage = in.readInt();
        voteCount = in.readInt();
    }

//    public void addReviewURL(String reviewURL) {
//        reviews.add(reviewURL);
//    }

    /**
     * isFavorite()
     * @return whether the movie is a favorite
     */
    public boolean isFavorite() { return favorite; }

    /**
     * isAdult()
     * @return whether the movie is adult
     */
    public boolean isAdult() { return adult;  }

    /**
     * getBackdropPath()
     * @return the backdropPath
     */
    public String getBackdropPath() { return backdropPath; }

    /**
     * getGenreIds()
     * @return the genreIds
     */
    public List<Integer> getGenreIds() { return genreIds; }

    /**
     * getId()
     * @return the movie id
     */
    public int getId() { return id; }

    /**
     * getOriginalLanguage()
     * @return the movie's original language
     */
    public String getOriginalLanguage() { return originalLanguage; }

    /**
     * getOriginalTitle()
     * @return the movie's original title
     */
    public String getOriginalTitle() { return originalTitle; }

    /**
     * getOverview()
     * @return a synopsis of the movie
     */
    public String getOverview() { return overview; }

    /**
     * getReleaseDate()
     * @return the release date of the movie
     */
    public String getReleaseDate() { return releaseDate; }

    /**
     * getPosterPath()
     * @return the url for the movie's poster image
     */
    public String getPosterPath() { return posterPath; }

    /**
     * getPopularity()
     * @return the movie's popularity rating
     */
    public int getPopularity() { return popularity; }

    /**
     * getTitle()
     * @return the movie's title
     */
    public String getTitle() { return title; }

    /**
     * isVideo()
     * @return whether the movie has been released to video
     */
    public boolean isVideo() { return video; }

    /**
     * getVoteAverage()
     * @return the movie's rating
     */
    public int getVoteAverage() { return voteAverage; }

    /**
     * getVoteCount()
     * @return the movie's vote count
     */
    public int getVoteCount() { return voteCount; }
}
